from ethereum import transactions
import rlp
import time
from web3 import Web3, KeepAliveRPCProvider
from simplecasper.casper_contract import casper_bytecode

# Setup web3 object
web3 = Web3(KeepAliveRPCProvider(
    host='0.0.0.0',
    port='8545'
))

# Setup my account
# TODO: Remove hardcoded private key and account address
my_private_key = 'f680e53e896faa42e6004b3d062ce51985269a1d903bcba73e88b43767c0c6ce'
my_account_address = '0xC293FB50262e7d6DfACA1E0ce72472f517413Fa5'

# Define rlp_decoder and sig_hasher addresses
rlp_deployer_acct = '0xfe2ec957647679d210034b65e9c7db2452910b0c'
sig_hash_deployer_acct = '0x6e7406512b244843c1171840dfcd3d7532d979fe'
# Hardcode the pre-signed raw transaction
rlp_decoder_tx_hex = '0xf903bd808506fc23ac008304c1908080b903aa6103988061000e6000396103a65660006101bf5361202059905901600090526101008152602081019050602052600060605261040036018060200159905901600090528181526020810190509050608052600060e0527f0100000000000000000000000000000000000000000000000000000000000000600035046101005260c061010051121561007e57fe5b60f86101005112156100a95760c061010051036001013614151561009e57fe5b6001610120526100ec565b60f761010051036020036101000a600161012051013504610140526101405160f7610100510360010101361415156100dd57fe5b60f76101005103600101610120525b5b366101205112156102ec577f01000000000000000000000000000000000000000000000000000000000000006101205135046101005260e0516060516020026020510152600160605101606052608061010051121561017a57600160e0516080510152600161012051602060e0516080510101376001610120510161012052602160e0510160e0526102da565b60b8610100511215610218576080610100510360e05160805101526080610100510360016101205101602060e05160805101013760816101005114156101ef5760807f010000000000000000000000000000000000000000000000000000000000000060016101205101350412156101ee57fe5b5b600160806101005103016101205101610120526020608061010051030160e0510160e0526102d9565b60c06101005112156102d65760b761010051036020036101000a6001610120510135046101405260007f0100000000000000000000000000000000000000000000000000000000000000600161012051013504141561027357fe5b603861014051121561028157fe5b6101405160e05160805101526101405160b761010051600161012051010103602060e05160805101013761014051600160b7610100510301016101205101610120526020610140510160e0510160e0526102d8565bfe5b5b5b602060605113156102e757fe5b6100ed565b60e051606051602002602051015261082059905901600090526108008152602081019050610160526000610120525b6060516101205113151561035c576020602060605102610120516020026020510151010161012051602002610160510152600161012051016101205261031b565b60e0518060206020606051026101605101018260805160006004600a8705601201f161038457fe5b50602060e051602060605102010161016051f35b6000f31b2d4f'  # noqa: E501
sig_hasher_tx_hex = '0xf902b9808506fc23ac008303b5608080b902a66102948061000e6000396102a2567f01000000000000000000000000000000000000000000000000000000000000006000350460205260c0602051121561003857fe6100a7565b60f8602051121561005657600160405260c0602051036060526100a6565b60f76020510360010160405260007f010000000000000000000000000000000000000000000000000000000000000060013504141561009157fe5b60f7602051036020036101000a600135046060525b5b36606051604051011415156100b857fe5b604051608052600060a0525b3660405112156101c0577f0100000000000000000000000000000000000000000000000000000000000000604051350460c052608060c05112156101165760405160a0526001604051016040526101bb565b60b860c051121561014257608060c0510360605260405160a052600160605101604051016040526101ba565b60c060c05112156101b75760007f01000000000000000000000000000000000000000000000000000000000000006001604051013504141561018057fe5b60b760c051036020036101000a600160405101350460605260405160a052600160b760c051036060510101604051016040526101b9565bfe5b5b5b6100c4565b60805160a0510360e0526103e861010052603860e051121561020f5760e05160c001610100515360e051608051600161010051013760e0516001016101005120610120526020610120f3610293565b60006101405260e051610160525b610160511561024257600161014051016101405261010061016051046101605261021d565b6101405160f7016101005153610140516020036101000a60e05102600161010051015260e0516080516101405160016101005101013760e05161014051600101016101005120610180526020610180f35b5b6000f31b2d4f'  # noqa: E501

# Helper methods used for waiting for and sending raw transactions
def wait_for_tx_receipt(tx_hash):
    if not web3.eth.getTransactionReceipt(tx_hash):
        time.sleep(0.5)
        wait_for_tx_receipt(tx_hash)
    return web3.eth.getTransactionReceipt(tx_hash)

def send_transaction(to_address='', amount_in_finney=0, data='', startgas=31000):
    tx = transactions.Transaction(
        nonce=web3.eth.getTransactionCount(my_account_address),
        gasprice=web3.eth.gasPrice,
        startgas=startgas,
        to=to_address,
        value=amount_in_finney,
        data=data
    )
    tx.sign(my_private_key)
    raw_tx = rlp.encode(tx)
    raw_tx_hex = web3.toHex(raw_tx)
    return web3.eth.sendRawTransaction(raw_tx_hex)

# Send ETH to the accounts which deploy the RLP decoder & sig hasher
print('Sending ETH to rlp acct')
rlp_acct_tx_hash = send_transaction(rlp_deployer_acct, 9350880000000000)
wait_for_tx_receipt(rlp_acct_tx_hash)
print('Confirmed with tx hash: ' + rlp_acct_tx_hash)
sig_hash_acct_tx_hash = send_transaction(sig_hash_deployer_acct, 7291200000000000)
print('Sending ETH to sig hash acct')
wait_for_tx_receipt(sig_hash_acct_tx_hash)
print('Confirmed with tx hash: ' + sig_hash_acct_tx_hash)

# Deploy RLP decoder library
print('Deploying rlp decoder')
rlp_decoder_tx_hash = web3.eth.sendRawTransaction(rlp_decoder_tx_hex)
rlp_decoder_address = wait_for_tx_receipt(rlp_decoder_tx_hash)['contractAddress']
print('Deployed rlp decoder contract at: ' + rlp_decoder_address)

# Deploy sig hasher
print('Deploying sig hasher')
sig_hasher_tx_hash = web3.eth.sendRawTransaction(sig_hasher_tx_hex)
sig_hasher_address = wait_for_tx_receipt(sig_hasher_tx_hash)['contractAddress']
print('Deployed sig hasher contract at: ' + sig_hasher_address)

# Deploy Casper
print('Deploying Casper')
casper_bytecode = casper_bytecode.replace('0x1db3439a222c519ab44bb1144fc28167b4fa6ee6', my_account_address)
casper_tx_hash = send_transaction(data=casper_bytecode, startgas=3100000)
casper_address = wait_for_tx_receipt(casper_tx_hash)['contractAddress']
print('Deployed Casper contract at: ' + casper_address)
